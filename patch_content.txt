+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "id": "d66880ca",
+   "metadata": {},
+   "source": [
+    "# Agent Notebook\n",
+    "\n",
+    "Cleaned version with well-typed helper functions and structured examples."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "458ce468",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "from __future__ import annotations\n",
+    "\n",
+    "import datetime\n",
+    "import json\n",
+    "from typing import Any, Iterator, Mapping, Optional\n",
+    "\n",
+    "from zoneinfo import ZoneInfo\n",
+    "from vertexai import agent_engines\n",
+    "from google.adk.sessions import types\n",
+    "from google.adk.agents import Agent"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "7d5cdb08",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def print_operation_schemas(agent: agent_engines.AgentEngine) -> None:\n",
+    "    \"\"\"Prints the name and description for each operation schema available in the agent.\"\"\"\n",
+    "    for schema in agent.operation_schemas():\n",
+    "        name = schema.get(\"name\", \"\")\n",
+    "        description = schema.get(\"description\", \"\")\n",
+    "        print(f\"Signature: {name}\n",
+    "Description: {description}\n",
+    "{'-' * 40}\")\n",
+    "\n",
+    "\n",
+    "def create_or_get_session(\n",
+    "    agent: agent_engines.AgentEngine,\n",
+    "    user_id: str,\n",
+    "    session_id: Optional[str] = None,\n",
+    ") -> types.Session:\n",
+    "    \"\"\"Creates a session for the user or retrieves an existing one.\"\"\"\n",
+    "    if session_id:\n",
+    "        return agent.get_session(user_id=user_id, session_id=session_id)\n",
+    "    return agent.create_session(user_id=user_id)\n",
+    "\n",
+    "\n",
+    "def call_agent(\n",
+    "    runner: agent_engines.AgentEngine,\n",
+    "    query: str,\n",
+    "    user_id: str,\n",
+    "    session_id: str,\n",
+    ") -> str:\n",
+    "    \"\"\"Sends a query to the agent and returns the final response.\"\"\"\n",
+    "    content = types.Content(role=\"user\", parts=[types.Part(text=query)])\n",
+    "    events = runner.run(user_id=user_id, session_id=session_id, new_message=content)\n",
+    "    final_response = \"\"\n",
+    "    for event in events:\n",
+    "        if event.is_final_response():\n",
+    "            final_response = event.content.parts[0].text\n",
+    "    return final_response\n",
+    "\n",
+    "\n",
+    "def parse_resume(\n",
+    "    agent: agent_engines.AgentEngine,\n",
+    "    resume_text: str,\n",
+    "    user_id: str,\n",
+    "    session_id: Optional[str] = None,\n",
+    ") -> Mapping[str, Any]:\n",
+    "    \"\"\"Parses resume text via the resume parser agent and returns structured data.\"\"\"\n",
+    "    session = create_or_get_session(agent, user_id=user_id, session_id=session_id)\n",
+    "    content = types.Content(role=\"user\", parts=[types.Part(text=resume_text)])\n",
+    "    events = agent.run(user_id=user_id, session_id=session.id, new_message=content)\n",
+    "    resume_data: Mapping[str, Any] = {}\n",
+    "    for event in events:\n",
+    "        for part in event.content.parts:\n",
+    "            if part.function_response and part.function_response.response.get(\"resume_data\"):\n",
+    "                resume_data = part.function_response.response[\"resume_data\"]\n",
+    "    if not resume_data:\n",
+    "        raise RuntimeError(\"Failed to parse resume.\")\n",
+    "    return resume_data\n",
+    "\n",
+    "\n",
+    "class WeatherResponse(Mapping[str, Any]):\n",
+    "    pass\n",
+    "\n",
+    "\n",
+    "def get_weather(city: str) -> Mapping[str, Any]:\n",
+    "    \"\"\"Retrieves the current weather report for a specified city.\"\"\"\n",
+    "    if city.lower() != \"new york\":\n",
+    "        return {\"status\": \"error\", \"error_message\": f\"Weather information for '{city}' is not available.\"}\n",
+    "    report = (\n",
+    "        \"The weather in New York is sunny with a temperature of 25°C \"\n",
+    "        \"(77°F).\"\n",
+    "    )\n",
+    "    return {\"status\": \"success\", \"report\": report}\n",
+    "\n",
+    "\n",
+    "def get_current_time(city: str) -> Mapping[str, Any]:\n",
+    "    \"\"\"Returns the current time in a specified city.\"\"\"\n",
+    "    if city.lower() != \"new york\":\n",
+    "        return {\"status\": \"error\", \"error_message\": f\"Sorry, I don't have timezone information for {city}.\"}\n",
+    "    tz = ZoneInfo(\"America/New_York\")\n",
+    "    now = datetime.datetime.now(tz)\n",
+    "    report = now.strftime(\"%Y-%m-%d %H:%M:%S %Z%z\")\n",
+    "    return {\"status\": \"success\", \"report\": report}"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "4b77902e",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "root_agent = Agent(\n",
+    "    name=\"weather_time_agent\",\n",
+    "    model=\"gemini-2.0-flash\",\n",
+    "    description=\"Agent to answer questions about the time and weather in a city.\",\n",
+    "    instruction=\"You are a helpful agent who can answer user questions about the time and weather in a city.\",\n",
+    "    tools=[get_weather, get_current_time],\n",
+    ")\n",
+    "\n",
+    "app = agent_engines.create(\n",
+    "    agent_engine=root_agent,\n",
+    "    requirements=[\"google-cloud-aiplatform[adk,agent_engines]\"],\n",
+    ")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "50837324",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Example usage: weather/time agent\n",
+    "session = app.create_session(user_id=\"u_123\")\n",
+    "print(session)\n",
+    "sessions = app.list_sessions(user_id=\"u_123\")\n",
+    "print(sessions)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "a30d229a",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# Example usage: operation schemas and resume parsing\n",
+    "agent = agent_engines.get(\n",
+    "    \"projects/gen-lang-client-0249131775/locations/us-central1/reasoningEngines/742786075260354560\"\n",
+    ")\n",
+    "print_operation_schemas(agent)\n",
+    "\n",
+    "resume_text = (\n",
+    "    \"Highly motivated and results-oriented professional with 5+ years of experience \"\n",
+    "    \"in project management and data analysis, seeking to leverage proven skills in \"\n",
+    "    \"strategic planning, process optimization, and cross-functional team leadership \"\n",
+    "    \"to drive impactful growth at your organization.\"\n",
+    ")\n",
+    "parsed_resume = parse_resume(agent, resume_text, user_id=\"test_user\")\n",
+    "print(parsed_resume)"
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Co-Agent-Recruitment",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.13.5"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 5
+}
